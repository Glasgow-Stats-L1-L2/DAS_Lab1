[["index.html", "Data Analysis: Visualising data using ggplot2 in R Getting Started", " Data Analysis: Visualising data using ggplot2 in R Getting Started This week we will demonstrate various techniques for visualising data in R using ggplot2. This will also include the correct interpretation and understanding of the different plotting techniques. Note on resources: A lot of the content within this course is based on the open-source book Statistical Inference via Data Science: A ModernDive into R and the tidyverse and thus is a useful source for additional examples and questions. In addition, the following websites are particularly useful for data visualization: From Data to Viz leads you to the most appropriate graph for your data R graph gallery lists hundreds of charts in several sections, always with their reproducible code available. This blog post shows that you can replicate almost any plot with R. It is advisable to record the code you create throughout this tutorial as a handy summary in an .R script file. You will be required to create and write your own script file in the \"Further Tasks\" section at the end of the session, but the given R code will help you engage with the material directly as you work through the following sections. Start by loading into R all of the libraries we will need for this session. This can be done by typing/copying the following code into your R script and \"running\" the code: install.packages(&quot;ggplot2&quot;) #Only include if the package hasn&#39;t already been installed library(ggplot2) install.packages(&quot;nycflights13&quot;) #Only include if the package hasn&#39;t already been installed library(nycflights13) The first library ggplot2 allows us to use functions within that package in order to create effective data visualisations. This library is part of the tidyverse collection of R packages, a powerful collection of data tools for transforming and visualizing data, which we will use throughout this course. Many of the libraries within the tidyverse package have concise summaries of the key functions and arguments known at \"cheat sheets\". These can be accessed via the Data Analysis Moodle page or from RStudio directly. You are encouraged to familiarise yourself with the \"cheat sheets\" and have them on hand as you analyse data. You will have access to these \"cheat sheets\" in the class tests. The second library nycflights13 contains data on flights from New York City in 2013 that we shall begin examining in the next section. You can get basic information on R packages using help(package = \"packagename\"), which can be applied to this library here: "],["viewing-the-data.html", "Viewing The Data", " Viewing The Data Before visualising any data set, we first need to know its contents. For example, the contents of the flights data within the nycflights13 library can be observed using the following command: head(flights, n = 3) This prints to the R console the first n = 3 rows of the flights data set, displaying each of the variables within said data set. We now know the data set contains 19 variables, as well as their names. A quick check on the size of a data set can be obtained using: dim(flights) ## [1] 336776 19 which displays the dimensions of the data set. Thus, here we have 336776 rows and 19 columns worth of data. To reduce the amount of data we will be working with and make things a little easier, let's only look at Alaska Airlines flights leaving from New York City in 2013. This can be done by subsetting the data in such a way that we only observe flights from Alaska Airlines (carrier code AS), as follows: Alaska &lt;- flights[flights$carrier == &quot;AS&quot;, ] This essentially picks out all of the rows within the flights data set for which the carrier code is AS and discards the rest, thus creating a new data set entitled Alaska. Task: Write code to observe the first 5 rows of the Alaska data. Hint You may want to use the head function. Solution head(Alaska, n = 5) ## # A tibble: 5 x 19 ## year month day dep_time sched_dep~1 dep_d~2 arr_t~3 sched~4 arr_d~5 carrier ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 2013 1 1 724 725 -1 1020 1030 -10 AS ## 2 2013 1 1 1808 1815 -7 2111 2130 -19 AS ## 3 2013 1 2 722 725 -3 949 1030 -41 AS ## 4 2013 1 2 1818 1815 3 2131 2130 1 AS ## 5 2013 1 3 724 725 -1 1012 1030 -18 AS ## # ... with 9 more variables: flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, ## # dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt;, and abbreviated variable names 1: sched_dep_time, ## # 2: dep_delay, 3: arr_time, 4: sched_arr_time, 5: arr_delay ## # i Use `colnames()` to see all variable names What are the dimensions of the Alaska data set? 714 19 19 714 500 19 19 500 Hint Check the the dimensions using the dim function. Next week we will look at more sophisticated ways of manipulating data sets. Now, let us go on to look at different visualisations of our Alaska data set using ggplot2, starting with scatterplots. "],["scatterplots.html", "Scatterplots", " Scatterplots The first data visualisation technique we introduce is the Scatterplot (or bivariate plot), which allows for two variables to be plotted against one another, with one plotted on the x-axis, and the other on the y-axis. This allows us to examine if there is any relationship between the two variables, such as positive or negative correlation, and whether the relationship appears linear or not. Let's say we wanted to observe the relationship between departure and arrival delays. We can do that in R using the ggplot function. First, we can set up the plotting region for our scatterplot of departure against arrival delays as follows: ggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) Figure 1: Figure 1: Plot with no layers. Here, we have set up our plotting region by giving to the ggplot function: The data Alaska by setting data = Alaska. The mapping of the coordinates for the axes using aes(x = dep_delay, y = arr_delay), where aes() relates to the plots aesthetics. That is, dep_delay maps to the x coordinate; and arr_delay maps to the y coordinate. In order to include the points on the scatterplot we now need to add an additional layer using the + command. The points are then added as follows: ggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) + geom_point() Figure 2: Figure 2: Relationship between arrival and departure delays. where geom_point specifies that the geometric objects to add to our plotting region are points. When adding layers using ggplot it should be noted that: the + command should come at the end of lines, otherwise R will produce an error. when adding additional layers it is a good idea to take a new line after each + command. This is so your code will be nice and clear with each layer given its own line of code. This is handy for code debugging. We can change the axes labels and include a title on our plot by adding another layer as follows: ggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) + geom_point() + labs(x = &quot;Departure delay (minutes)&quot;, y = &quot;Arrival delay (minutes)&quot;, title = &quot;Alaska Airlines flights leaving NYC in 2013&quot;) Figure 3: Figure 3: Relationship between arrival and departure delays with nice labels. How would you describe the relationship between departure and arrival delays? negative positive none Hint As departure delays increase, arrival delays also tends to increase. Over-plotting From our scatterplot it is clear to see that the vast majority of the points lie close to zero for both departure and arrival delays. This can make it difficult at times to observe what is going on. This is due to so many points being plotted very close to each other, and often plotted over one another in such a way that it is impossible to count how many points are actually plotted. This is referred to as over-plotting. Using ggplot, there are two ways we can address this problem: adjust the transparency of the plotted points using the alpha argument. jitter the points using the geom_jitter function. Transparency - We shall first alter the transparency of the points and see if this improves the situation. This is done as follows: ggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) + geom_point(alpha = 0.2) + labs(x = &quot;Departure delay (minutes)&quot;, y = &quot;Arrival delay (minutes)&quot;, title = &quot;Alaska Airlines flights leaving NYC in 2013&quot;) Figure 4: Figure 4: Relationship between arrival and departure delays with alpha = 0.2. The alpha command ranges between 0 and 1, where 0 relates to 100% transparency, while 1 (default) sets the points to be 100% opaque. By changing the transparency levels of the points we can observe clusters of points that are close to one another as they will be darker than areas of the plot with fewer points clustered together. Task: Play around with different levels of alpha to see how it effects the points. Hint You may want to edit the R code above. Solution ggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) + geom_point(alpha = 0.6) + labs(x = &quot;Departure delay (minutes)&quot;, y = &quot;Arrival delay (minutes)&quot;, title = &quot;Alaska Airlines flights leaving NYC in 2013&quot;) Jittering - The idea behind jittering is that each point is randomly moved, or nudged, slightly from its original position in such a way that clusters of points with the same coordinates can be observed, instead of being plotted on top of one another. To understand this, let's create a small data set consisting purely of zeros, such that: jitter.example &lt;- matrix(0, nrow = 10, ncol = 2) This basically creates a 10 by 2 matrix of zeros. You can look at it in the console by simply typing: jitter.example ## [,1] [,2] ## [1,] 0 0 ## [2,] 0 0 ## [3,] 0 0 ## [4,] 0 0 ## [5,] 0 0 ## [6,] 0 0 ## [7,] 0 0 ## [8,] 0 0 ## [9,] 0 0 ## [10,] 0 0 Now, ggplot only works with data frames and not matrices, so we need to convert jitter.example into a data frame. This can be done using: jitter.example &lt;- as.data.frame(jitter.example) If in doubt, there are functions within R that can be used to determine whether an object is a matrix or a data frame. See: ?is.matrix ?is.data.frame Now, let's plot our toy example: ggplot(data = jitter.example, mapping = aes(x = V1, y = V2)) + geom_point() (#fig:jitter example4)Figure 5: Jitter example data scatterplot. Note that since changing jitter.example into a data frame, the columns have been given the default variable names V1 and V2. From the plot, if you had never seen our toy example before you would think only a single value was plotted due to them all being zero. If we shift each of the points slightly using jittering we will be able to see them more clearly: ggplot(data = jitter.example, mapping = aes(x = V1, y = V2)) + geom_jitter(width = 0.1, height = 0.1) (#fig:jitter example5)Figure 6: Jittered scatterplot of jitter example data. Note that geom_jitter has replaced geom_point. Now we can clearly see all 10 observations plotted. The amount of horizontal and vertical jittering of the points is controlled by the width and height arguments within geom_jitter. Task: Try playing around with different width and height values. Hint Edit the widthand height values of the previous R code. Solution ggplot(data = jitter.example, mapping = aes(x = V1, y = V2)) + geom_jitter(width = 0.01, height = 0.01) The true values we generated are all zero, so it wouldn't make much sense to jitter them in such a way that they were significantly different from zero. Now that we understand the idea behind jittering, let's produce a jittered scatterplot of the Alaska data: ggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) + geom_jitter(width = 30, height = 30) + labs(x = &quot;Departure delay (minutes)&quot;, y = &quot;Arrival delay (minutes)&quot;, title = &quot;Alaska Airlines flights leaving NYC in 2013&quot;) Figure 5: Figure 7: Jittered scatterplot of arrival and departure delays. Now we can see more of the points plotted within the cluster of points around (0,0). However, since this cluster is so large, it can be argued that jittering has not helped much here. Also, it is important to add enough jitter in order to separate the overlapping of points, however, not so much that we lose any pattern observed within the points. It should also be noted that jittering does not change the actual values of the points within the data set, it is merely used to help with visualising the data. Scatterplot matrix The ggpairs() function of the GGally package produces a scatterplot matrix where pairwise relationships between several numerical variables are produced together with density estimates of their univariate distributions and correlation coefficients. We will use this code from www.r-graph-gallery.com to illustrate. library(GGally) # Create data data &lt;- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1)) data$v4 = data$var1 ** 2 data$v5 = -(data$var1 ** 2) # Check correlations (as scatterplots), distribution and print correlation coefficient ggpairs(data, title=&quot;Scatterplot matrix with ggpairs()&quot;) "],["histograms.html", "Histograms", " Histograms Histograms allow us to look at the statistical distribution of a variable. They show us how many values of a variable fall within specified bins. These bins give ranges of values for which the variable lies. The bins can be altered, that is, by changing their width, or by increasing the number of bins, such that we see the distribution at a higher resolution. Here, let's take a look at the weather data set that is within the nycflights13 library. This data set contains hourly weather data from three airports (LGA, JFK and EWR) in New York City in 2013. We can look at its contents via: head(weather, n = 3) ## # A tibble: 3 x 15 ## origin year month day hour temp dewp humid wind_dir wind_speed wind_gust ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 EWR 2013 1 1 1 39.0 26.1 59.4 270 10.4 NA ## 2 EWR 2013 1 1 2 39.0 27.0 61.6 250 8.06 NA ## 3 EWR 2013 1 1 3 39.0 28.0 64.4 240 11.5 NA ## # ... with 4 more variables: precip &lt;dbl&gt;, pressure &lt;dbl&gt;, visib &lt;dbl&gt;, ## # time_hour &lt;dttm&gt; ## # i Use `colnames()` to see all variable names To create a histogram using ggplot we use the geom_histogram command, or layer, instead of geom_point as with scatterplots. We can create a histogram of the hourly temperature data in NYC in 2013 using ggplot as follows: ggplot(data = weather, mapping = aes(x = temp)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 6: Figure 8: Histogram of hourly temperature recordings from NYC in 2013. Here, ggplot tells us that it used 30 bins when creating the histogram. We can adjust the bins in ggplot using two different approaches. Either by adjusting the number of bins using the bins argument; or the width of the bins using the binwidth argument. Let's first start by specifying the number of bins as follows: ggplot(data = weather, mapping = aes(x = temp)) + geom_histogram(bins = 60, color = &quot;white&quot;) Figure 7: Figure 9: Histogram of hourly temperature recordings from NYC in 2013 (with 60 bins). Task: Play around with a different number of bins. What does changing the number of bins tell us about the distribution of the hourly temperature levels? Hint Edit the bins argument from the previous R code. By changing the number of bins we can see the distribution of the hourly temperature levels at coarser or finer resolutions. We need to try and strike the right balance. Solution ggplot(data = weather, mapping = aes(x = temp)) + geom_histogram(bins = 40, color = &quot;white&quot;) Note, we also specified the outline colour of the bins to make it easier to differentiate between them. The colour of the bins themselves can be changed by including the fill argument. The 657 colour options available can be found by typing the following into the R console: colors() Instead of specifying the number of bins, we can specify their width using binwidth as follows: ggplot(data = weather, mapping = aes(x = temp)) + geom_histogram(binwidth = 5, color = &quot;white&quot;) Figure 8: Figure 10: Histogram of hourly temperature recordings from NYC in 2013 (using binwidth). Finally, we can give the histogram a title and clean up the labels to make them more informative: Figure 9: Figure 11: Histogram of hourly temperature recordings from NYC in 2013 with updated labels. Task: Modify the previous histogram code to produce a similar histogram to the labelled one above. Hint Use the fill argument to specify the colour of the bins, and add labels using the labs() function within ggplot. Solution ggplot(data = weather, mapping = aes(x = temp)) + geom_histogram(bins = 60, color = &quot;white&quot;, fill = &quot;skyblue&quot;) + labs(x = &quot;Temperature (Hourly)&quot;, title = &quot;Hourly temperatures from NYC in 2013&quot;) How would you describe the distribution of hourly temperature? (select ALL that apply) left-skewed symmetrical skewed right-skewed bell-shaped From looking at the histogram of hourly temperature levels, which interval do you think the median/mean falls within? 40-50 50-60 60-70 65-75 "],["boxplots.html", "Boxplots", " Boxplots Another way to look at the distribution of a variable is using a boxplot. A boxplot makes use of the standard five-number summary, that is the minimum value; the first quartile or 25th percentile; the median (or 2nd quartile / 50th percentile); the third quartile or 75th percentile; and the maximum value. Keeping with the hourly temperature data, the five-number summary can be obtained in R using the following command: summary(weather$temp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 10.94 39.92 55.40 55.26 69.98 100.04 1 This provides us with the five-number summary, as well as the mean hourly temperature. There is one missing value in the hourly temperature data, which is represented in R by NA. What does having similar median and mean values say about the distribution of a variable? skewed symmetrical The boxplot of the hourly temperature data is plotted below. Figure 10: Figure 12: Boxplot of hourly temperature recordings from NYC in 2013. The elements of the boxplot relating to the five-number summary have also been labelled. Other features of the boxplot are: the interquartile range (IQR), that is, the height of the box (3rd - 1st quartiles), and is a measure of the spread of the middle 50% of values. Longer boxes are indicative of greater variability. The dashed lines are known as whiskers and represent values less than the 25th percentile, and greater than the 75th percentile, respectively. The longer the whiskers, the more variability there is outside of the middle 50%. Boxplots are useful visualisations when comparing the distribution of a numerical variable split across groups (or a categorical variable). For example, we could look at how the hourly temperature changes by month, where month is our categorical, or grouping, variable. To create boxplots using ggplot we use the geom_boxplot function. If we want to look at boxplots of a variable separately for a categorical variable then we need to introduce the factor function. This converts a numerical variable into a categorical one, essentially creating labels or categories from the numeric values. For example, the month variable within the weather data set is a numerical variable taking on the values 1,\\(\\ldots\\),12, for each month. However, it makes more sense to convert this into a categorical variable using the factor function, such that: weather$month ## [1] 1 1 1 1 1 1 1 1 1 1 becomes factor(weather$month) ## [1] 1 1 1 1 1 1 1 1 1 1 ## Levels: 1 2 3 4 5 6 7 8 9 10 11 12 with levels, or categories, 1,\\(\\ldots\\),12 for each month. Hence, the boxplots can be produced using ggplot as follows: ggplot(data = weather, mapping = aes(x = factor(month), y = temp)) + geom_boxplot(fill = &quot;steelblue&quot;) + labs(x = &quot;Month&quot;, y = &quot;Temperature (Hourly)&quot;, title = &quot;Hourly temperatures from NYC in 2013 by month&quot;) + scale_x_discrete(labels = c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;)) Figure 11: Figure 13: Boxplots of hourly temperature recordings from NYC in 2013 by month. Note, we have introduced a new function scale_x_discrete, which is used to rename the labels of the boxplots. This function is used as our categorical variables are discrete in nature. After splitting the hourly temperatures by month, we now see points extending beyond the whiskers of the boxplots. These are known as outliers, and may be thought of as unusually small or large values. However, the definition of an outlier here is somewhat arbitrary as they are defined by the length of the whiskers, which are no more than 1.5 x IQR. Which month has the highest median hourly temperature? January February March April May June July August September October November December Hint Remember that the horizontal line within the boxplot is the median value. Which month has the largest amount of spread within the middle 50% of the hourly temperature? January February March April May June July August September October November December Hint Remember that the box of the boxplot contains the middle 50% of data, and as such the larger the box, the more spread or variability within the middle 50% of values. "],["barplots.html", "Barplots", " Barplots Barplots, or barcharts, are used to visualise the distributions of categorical variables. This essentially provides us with the frequencies of categories within a categorical variable. Let's take a look at the distribution of airline carriers within the flights data that flew out of New York City in 2013. We can do this by creating a table containing the number of flights from each airline carrier as follows: carrier.freq &lt;- table(flights$carrier) carrier.freq &lt;- as.data.frame(carrier.freq) colnames(carrier.freq) &lt;- c(&quot;carrier&quot;, &quot;number&quot;) Note, ggplot expects the data passed to it to be a data frame, which is why the above table is converted into a data frame. The names of the columns in our data frames have also been updated using the colnames function. Task: Take a look at the carrier.freq data set within the R console. Hint Hint: You can view an object in R by simply typing its name into the R console window. Solution carrier.freq ## carrier number ## 1 9E 18460 ## 2 AA 32729 ## 3 AS 714 ## 4 B6 54635 ## 5 DL 48110 ## 6 EV 54173 ## 7 F9 685 ## 8 FL 3260 ## 9 HA 342 ## 10 MQ 26397 ## 11 OO 32 ## 12 UA 58665 ## 13 US 20536 ## 14 VX 5162 ## 15 WN 12275 ## 16 YV 601 To create barplots using ggplot we use the geom_col function: ggplot(data = carrier.freq, mapping = aes(x = carrier, y = number)) + geom_col() Figure 12: Figure 14: Carriers who flew out of New York City in 2013. Task: Add to the code above to produce Figure 14. Hint You need to include the additional labs layer to ggplot using the x, y and title arguments. Solution ggplot(data = carrier.freq, mapping = aes(x = carrier, y = number)) + geom_col() + labs(x = &quot;Carrier&quot;, y = &quot;Count&quot;, title = &quot;Carriers who flew out of New York City in 2013&quot;) Note, the names of the airlines relating to the carrier codes can be found by typing airlines into the R console. What is the name of the airline which had the most flights out of New York City in 2013? Virgin America Other Enovy Air US Airways Inc. Endeavor Air Inc. United Air Lines Inc. Barplots can also be used to compare two categorical variables. For instance, let's say we wanted to look at the number of flights that flew out of New York City in 2013 from each carrier and from each airport (LGA, JFK and EWR). To obtain a table of this information we simply add the flights origin to our previous table as follows: carrier.origin &lt;- table(flights$origin, flights$carrier) carrier.origin &lt;- as.data.frame(carrier.origin) colnames(carrier.origin) &lt;- c(&quot;origin&quot;, &quot;carrier&quot;, &quot;number&quot;) The barplot for comparing two categorical variables is very similar in this case, where we simply pass the additional fill argument to the aes function. Including the fill argument lets ggplot plot know that we want to split the barplot according to an additional categorical variable, which is origin in this case. The barplot is then given by: ggplot(data = carrier.origin, mapping = aes(x = carrier, y = number, fill = origin)) + geom_col() + labs(x = &quot;Carrier&quot;, y = &quot;Count&quot;, title = &quot;Carriers who flew out of New York City in 2013&quot;) Figure 13: Figure 15: Stacked barplot of carriers who flew out of New York City in 2013. This is what is referred to as a stacked barplot since the bars for each origin are simply stacked on top of one another for each of the carriers. You can control the colours in the stacked bar plots with two categorial variables by adding an additional layer + scale_fill_manual(values = c(...)). Which origin did JetBlue Airways appear to favour in 2013? John F. Kennedy Airport (JFK) LAGuardia Airport (LGA) Newark Liberty International Airport (EWR) This provides us with a visually nice barplot to present our carrier information by airport of origin. However, there are also alternative barplots to the stacked barplot. One alternative to a stacked barplot is the side-by-side (or dodged) barplot, which, as suggested by its name, places the bars next to each other instead of on top of one another. This can be produced as follows: ggplot(data = carrier.origin, mapping = aes(x = carrier, y = number, fill = origin)) + geom_col(position = &quot;dodge&quot;) + labs(x = &quot;Carrier&quot;, y = &quot;Count&quot;, title = &quot;Carriers who flew out of New York City in 2013&quot;) Figure 14: Figure 16: Dodged barplot of carriers who flew out of New York City in 2013. This is done by passing to the geom_col function the position of the barplots, which in this case is dodge. Before moving on, consider the following two questions: What could be considered a positive of using a side-by-side barplot as opposed to a stacked barplot? What could be a disadvantage of using a side-by-side barplot? Lastly, let's take a look at what is referred to as a faceted barplot. They provide an easier way to compare the carrier distributions by origin, and can be obtained as follows: ggplot(data = carrier.origin, mapping = aes(x = carrier, y = number, fill = origin)) + geom_col() + facet_wrap(~ origin, ncol = 1) + labs(x = &quot;Carrier&quot;, y = &quot;Count&quot;, title = &quot;Carriers who flew out of New York City in 2013&quot;) Figure 15: Figure 17: Faceted barplot of carriers who flew out of New York City in 2013. Here we include the facet_wrap function, where we want separate barplots by origin, and hence we use ~ origin. We also choose to have them plotted in one column via ncol = 1. This makes it easier to compare their distributions now that they are not stacked on top or beside one another. Before moving on to the next section, consider the following questions: What is the difference between histograms and barplots? Why can't we use histograms to visualise categorical variables? "],["linegraphs.html", "Linegraphs", " Linegraphs Linegraphs are typically used when looking at time series data, that is, when we have information on how a variable changes over time. Hence, there is a natural ordering to the data when observing how something changes over time, and therefore, linegraphs should be avoided if there is no sequential ordering of a variable. Let's again look at the hourly temperature data, but this time only for Newark International Airport in January. This can be done by first subsetting the data as follows: Newark.Jan &lt;- weather[weather$origin == &quot;EWR&quot; &amp; weather$month == 1, ] Task: Get a feel for what is contained in the new data set for hourly temperatures at Newark International Airport in January using functions mentioned earlier. Hint Try using the head and dim functions. Solution head(Newark.Jan) ## # A tibble: 6 x 15 ## origin year month day hour temp dewp humid wind_dir wind_speed wind_gust ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 EWR 2013 1 1 1 39.0 26.1 59.4 270 10.4 NA ## 2 EWR 2013 1 1 2 39.0 27.0 61.6 250 8.06 NA ## 3 EWR 2013 1 1 3 39.0 28.0 64.4 240 11.5 NA ## 4 EWR 2013 1 1 4 39.9 28.0 62.2 250 12.7 NA ## 5 EWR 2013 1 1 5 39.0 28.0 64.4 260 12.7 NA ## 6 EWR 2013 1 1 6 37.9 28.0 67.2 240 11.5 NA ## # ... with 4 more variables: precip &lt;dbl&gt;, pressure &lt;dbl&gt;, visib &lt;dbl&gt;, ## # time_hour &lt;dttm&gt; ## # i Use `colnames()` to see all variable names dim(Newark.Jan) ## [1] 742 15 To produce linegraphs using ggplot we use the geom_line function. Hence, our linegraph for the hourly temperatures at Newark International Airport in January 2013 can be created as follows: ggplot(data = Newark.Jan, mapping = aes(x = time_hour, y = temp)) + geom_line() + labs(x = &quot;Time (Hours)&quot;, y = &quot;Temperature&quot;, title = &quot;Hourly Temperature at Newark Airport in January 2013&quot;) Figure 16: Figure 18: Hourly temperature at Newark Airport in January 2013. Before moving on to the next section, consider the following: In the code for the linegraph above, why has time_hour been plotted on the x-axis and not hour? Why should linegraphs be avoided when there is no sequential ordering of the data? Why are linegraphs used when time is the explanatory variable? Describe the trend in hourly temperature at Newark International Airport in January 2013. "],["arranging-multiple-plots-on-a-page.html", "Arranging Multiple Plots On A Page", " Arranging Multiple Plots On A Page Often we need to produce plots of different types and display them together. The grid.arrange() function in the gridExtra package is one way to do this, as shown here in this code using plots that we have seen above: library(gridExtra) p1 &lt;- ggplot(data = Alaska, mapping = aes(x = dep_delay, y = arr_delay)) + geom_jitter(width = 30, height = 30) + labs(x = &quot;Departure delay (minutes)&quot;, y = &quot;Arrival delay (minutes)&quot;, title = &quot;Alaska Airlines flights leaving NYC in 2013&quot;) + theme(plot.title = element_text(size=7)) p2 &lt;- ggplot(data = weather, mapping = aes(x = factor(month), y = temp)) + geom_boxplot(fill = &quot;steelblue&quot;) + labs(x = &quot;Month&quot;, y = &quot;Temperature (Hourly)&quot;, title = &quot;Hourly temperatures from NYC in 2013 by month&quot;) + scale_x_discrete(labels = c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;))+ theme(plot.title = element_text(size=7)) p3 &lt;- ggplot(data = carrier.freq, mapping = aes(x = carrier, y = number)) + geom_col() + labs(x = &quot;Carrier&quot;, y = &quot;Count&quot;, title = &quot;Carriers who flew out of New York City in 2013&quot;) + theme(plot.title = element_text(size=7)) p4 &lt;- ggplot(data = Newark.Jan, mapping = aes(x = time_hour, y = temp)) + geom_line() + labs(x = &quot;Time (Hours)&quot;, y = &quot;Temperature&quot;, title = &quot;Hourly Temperature at Newark Airport in January 2013&quot;) + theme(plot.title = element_text(size=7)) grid.arrange(p1, p2, p3, p4, ncol=2) More examples can be found in this vignette. Another way to do this is using the cowplot package. "],["further-tasks.html", "Further Tasks", " Further Tasks The tasks below should be answered by creating your own .R script file. The first step is to load into R all of the libraries you will need. This can be done by typing/copying and running the following code in your R script: library(ggplot2) library(nycflights13) From the flights data set, subset the data for the airline carrier JetBlue Airways and produce a scatterplot of their departure delays against arrival delays using ggplot. Interpret the scatterplot. Hint First subset the flights data for the carrier B6 using the same approach we used when creating the Alaska data set. Produce a histogram of the hourly temperature from Newark Liberty International (EWR) Airport in 2013 using ggplot. How does the temperature distribution compare with that from all airports in New York City in 2013? Hint Subset the weather data set so you are only looking at the hourly temperature levels for EWR airport. For John F. Kennedy Airport, produce boxplots (using a single ggplot command) of the hourly temperature for the months May, June, July, August and September. How does the hourly temperature change during this period? Hint You can subset data across multiple variables using the &amp; (AND) and %in% (IN) operators. For example, flights[flights$carrier == \"US\" &amp; flights$origin %in% c(\"LGA\", \"EWR\"), ]. Take a look at the mtcars data set within the datasets library relating to data extracted from the 1974 Motor Trend US magazine. Using ggplot, produce a faceted barplot of the categorical variables relating to the number of cylinders (cyl) and the automobiles transmission (am). Interpret the barplot. Hint Start by creating a table from cyl and am. Remember that ggplot requires data passed to it to be a data frame (see as.data.frame). Produce a linegraph of the hourly temperature at LAGuardia (LGA) Airport for the month of October 2013. Interpret the linegraph. Hint Subset the weather data set for LGA airport and the month October. See the hint for Task 3. --&gt; "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
